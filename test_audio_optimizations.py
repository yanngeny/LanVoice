"""
Script de test et benchmark des optimisations audio LanVoice
Mesure les am√©liorations de latence et qualit√©
"""

import time
import threading
import sys
import os
import statistics

# Ajouter le dossier src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    from src.audio_config import AudioConfig, AudioOptimizer, benchmark_audio_configs
    from src.server import VoiceServer
    from src.client import VoiceClient
    from src.logger import init_logging, get_logger
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

def test_audio_configurations():
    """Teste les diff√©rentes configurations audio"""
    print("=" * 80)
    print("üéµ TEST DES CONFIGURATIONS AUDIO OPTIMIS√âES")
    print("=" * 80)
    
    # Afficher les profils disponibles
    benchmark_audio_configs()
    
    # Test pratique avec PyAudio
    try:
        import pyaudio
        audio = pyaudio.PyAudio()
        
        print(f"\nüîä TESTS PYAUDIO PRATIQUES")
        print("=" * 50)
        
        configs_to_test = [
            ("ULTRA_LOW_LATENCY", AudioConfig.ULTRA_LOW_LATENCY),
            ("LOW_LATENCY", AudioConfig.LOW_LATENCY),
            ("QUALITY", AudioConfig.QUALITY),
            ("BANDWIDTH_SAVING", AudioConfig.BANDWIDTH_SAVING)
        ]
        
        for name, config in configs_to_test:
            print(f"\nüìä Test: {name}")
            try:
                # Tester la cr√©ation d'un stream d'entr√©e
                stream = audio.open(
                    format=config['FORMAT'],
                    channels=config['CHANNELS'],
                    rate=config['RATE'],
                    input=True,
                    frames_per_buffer=config['CHUNK']
                )
                
                # Mesurer le temps de lecture d'un chunk
                start_time = time.perf_counter()
                data = stream.read(config['CHUNK'], exception_on_overflow=False)
                read_time = time.perf_counter() - start_time
                
                stream.stop_stream()
                stream.close()
                
                theoretical_latency = AudioConfig.get_latency_ms(config)
                actual_latency = read_time * 1000
                
                print(f"   ‚úÖ Succ√®s - Latence th√©orique: {theoretical_latency:.1f}ms")
                print(f"               Latence mesur√©e: {actual_latency:.1f}ms")
                print(f"               Taille chunk: {len(data)} bytes")
                
            except Exception as e:
                print(f"   ‚ùå √âchec: {e}")
        
        audio.terminate()
        
    except ImportError:
        print("‚ö†Ô∏è PyAudio non disponible pour les tests pratiques")

def benchmark_compression():
    """Benchmark de la compression audio"""
    print(f"\nüóúÔ∏è BENCHMARK COMPRESSION AUDIO")
    print("=" * 50)
    
    import zlib
    import random
    
    # Simuler des donn√©es audio de diff√©rentes tailles
    test_sizes = [128, 256, 512, 1024, 2048]  # Chunks audio typiques
    compression_levels = [1, 3, 6, 9]  # Niveaux de compression zlib
    
    for chunk_size in test_sizes:
        print(f"\nüì¶ Chunk size: {chunk_size} samples ({chunk_size * 2} bytes)")
        
        # G√©n√©rer des donn√©es audio simul√©es (variation sinuso√Ødale + bruit)
        audio_data = bytearray()
        for i in range(chunk_size):
            # Simuler audio vocal avec harmoniques
            sample = int(32767 * 0.3 * (
                0.7 * (i / chunk_size) +  # Tendance
                0.2 * ((i * 3) % 100 / 100) +  # Harmonique
                0.1 * random.random()  # Bruit
            ))
            audio_data.extend(sample.to_bytes(2, 'little', signed=True))
        
        original_size = len(audio_data)
        
        for level in compression_levels:
            start_time = time.perf_counter()
            compressed = zlib.compress(audio_data, level=level)
            compress_time = time.perf_counter() - start_time
            
            start_time = time.perf_counter()
            decompressed = zlib.decompress(compressed)
            decompress_time = time.perf_counter() - start_time
            
            compression_ratio = len(compressed) / original_size
            total_time = compress_time + decompress_time
            
            print(f"   Niveau {level}: {compression_ratio:.3f} ratio, "
                  f"{total_time*1000:.2f}ms total, "
                  f"({compress_time*1000:.2f}ms + {decompress_time*1000:.2f}ms)")
            
            # V√©rifier l'int√©grit√©
            if decompressed != audio_data:
                print(f"   ‚ùå ERREUR: Corruption des donn√©es!")
    
    print(f"\nüéØ RECOMMANDATION: Niveau 1 pour temps r√©el (< 1ms)")

def test_network_optimizations():
    """Teste les optimisations r√©seau"""
    print(f"\nüåê TEST OPTIMISATIONS R√âSEAU")
    print("=" * 50)
    
    # Test de cr√©ation de serveur optimis√©
    try:
        server = VoiceServer(host="127.0.0.1", port=12347)
        server_thread = threading.Thread(target=server.start, daemon=True)
        server_thread.start()
        
        time.sleep(0.5)  # Laisser le serveur d√©marrer
        
        if server.running:
            print("‚úÖ Serveur optimis√© cr√©√© avec succ√®s")
            
            # Test de connexion client optimis√©
            client = VoiceClient(host="127.0.0.1", port=12347)
            if client.connect():
                print("‚úÖ Client optimis√© connect√© avec succ√®s")
                print(f"   üìä Configuration: {client.audio_config.get('DESCRIPTION', 'N/A')}")
                print(f"   ‚ö° Latence th√©orique: ~{client._calculate_latency_ms():.1f}ms")
                print(f"   üóúÔ∏è Compression: {'Activ√©e' if client.use_compression else 'D√©sactiv√©e'}")
                
                client.disconnect()
                print("‚úÖ Client d√©connect√© proprement")
            else:
                print("‚ùå √âchec connexion client")
            
            server.stop()
            print("‚úÖ Serveur arr√™t√© proprement")
        else:
            print("‚ùå √âchec d√©marrage serveur")
            
    except Exception as e:
        print(f"‚ùå Erreur test r√©seau: {e}")

def performance_summary():
    """R√©sum√© des performances attendues"""
    print(f"\n" + "=" * 80)
    print("üìà R√âSUM√â DES AM√âLIORATIONS DE PERFORMANCE")
    print("=" * 80)
    
    print(f"\nüéØ R√âDUCTIONS DE LATENCE:")
    print(f"   ‚Ä¢ Configuration audio: 1024‚Üí256 chunks = ~75% latence en moins")
    print(f"   ‚Ä¢ Buffers r√©seau optimis√©s: TCP_NODELAY + buffers r√©duits")
    print(f"   ‚Ä¢ Threads haute priorit√©: Moins d'interruptions syst√®me")
    print(f"   ‚Ä¢ Buffer adaptatif: √âvite l'accumulation de latence")
    
    print(f"\nüíæ OPTIMISATIONS BANDE PASSANTE:")
    print(f"   ‚Ä¢ Compression zlib niveau 1: ~60-80% r√©duction")
    print(f"   ‚Ä¢ Transmission s√©lective VOX: √âconomie sur silences")
    print(f"   ‚Ä¢ Pr√©-compression serveur: Une compression pour tous")
    
    print(f"\n‚è±Ô∏è LATENCES TH√âORIQUES (sans r√©seau):")
    print(f"   ‚Ä¢ Ultra Low: ~3ms (128 samples @ 44.1kHz)")
    print(f"   ‚Ä¢ Low Latency: ~6ms (256 samples @ 44.1kHz)")
    print(f"   ‚Ä¢ Quality: ~12ms (512 samples @ 44.1kHz)")
    print(f"   ‚Ä¢ Bandwidth Saving: ~12ms (256 samples @ 22kHz)")
    
    print(f"\nüîß OPTIMISATIONS ADDITIONNELLES POSSIBLES:")
    print(f"   ‚Ä¢ Passage UDP: -90% latence r√©seau (TCP‚ÜíUDP)")
    print(f"   ‚Ä¢ Suppression d'√©cho (AEC): Am√©lioration qualit√©")
    print(f"   ‚Ä¢ Filtrage adaptatif: R√©duction bruit de fond")
    print(f"   ‚Ä¢ Pr√©diction audio: Compensation paquets perdus")

def main():
    """Fonction principale de test"""
    print("üöÄ LANVOICE - TESTS DE PERFORMANCE AUDIO")
    print("Version optimis√©e avec compression et latence r√©duite")
    
    # Initialiser le logging
    init_logging()
    
    # Ex√©cuter tous les tests
    test_audio_configurations()
    benchmark_compression()
    test_network_optimizations()
    performance_summary()
    
    print(f"\n‚ú® Tests termin√©s! Consultez les logs pour plus de d√©tails.")

if __name__ == "__main__":
    main()