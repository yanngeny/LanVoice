#!/usr/bin/env python3
"""
LanVoice - Outil de Diagnostic Audio v2.0
Diagnostique les probl√®mes audio et propose des solutions
"""

import pyaudio
import socket
import platform
import psutil
import time
import numpy as np
from datetime import datetime

class LanVoiceDiagnostic:
    def __init__(self):
        self.results = []
        self.errors = []
        self.warnings = []
        
    def log_result(self, test_name, status, details="", solution=""):
        """Enregistre le r√©sultat d'un test"""
        self.results.append({
            'test': test_name,
            'status': status,
            'details': details,
            'solution': solution,
            'timestamp': datetime.now().strftime("%H:%M:%S")
        })
        
    def test_audio_devices(self):
        """Teste la disponibilit√© des p√©riph√©riques audio"""
        print("üéµ Test des p√©riph√©riques audio...")
        
        try:
            p = pyaudio.PyAudio()
            device_count = p.get_device_count()
            
            if device_count == 0:
                self.log_result("P√©riph√©riques Audio", "‚ùå ERREUR", 
                              "Aucun p√©riph√©rique audio d√©tect√©", 
                              "V√©rifiez que vos pilotes audio sont install√©s")
                return False
                
            input_devices = []
            output_devices = []
            
            for i in range(device_count):
                info = p.get_device_info_by_index(i)
                if info['maxInputChannels'] > 0:
                    input_devices.append(info['name'])
                if info['maxOutputChannels'] > 0:
                    output_devices.append(info['name'])
            
            self.log_result("P√©riph√©riques Audio", "‚úÖ OK", 
                          f"Entr√©e: {len(input_devices)}, Sortie: {len(output_devices)}")
            
            if len(input_devices) == 0:
                self.log_result("Microphone", "‚ö†Ô∏è ATTENTION", 
                              "Aucun microphone d√©tect√©", 
                              "Connectez un microphone ou v√©rifiez les permissions")
                
            if len(output_devices) == 0:
                self.log_result("Haut-parleurs", "‚ö†Ô∏è ATTENTION", 
                              "Aucun haut-parleur d√©tect√©", 
                              "Connectez des haut-parleurs ou un casque")
            
            p.terminate()
            return True
            
        except Exception as e:
            self.log_result("P√©riph√©riques Audio", "‚ùå ERREUR", 
                          f"Erreur PyAudio: {str(e)}", 
                          "R√©installez PyAudio ou v√©rifiez les pilotes audio")
            return False
    
    def test_audio_latency(self):
        """Teste la latence audio avec diff√©rents buffers"""
        print("‚è±Ô∏è Test de latence audio...")
        
        buffer_sizes = [256, 512, 1024, 2048, 4096]
        sample_rate = 44100
        
        try:
            p = pyaudio.PyAudio()
            
            for buffer_size in buffer_sizes:
                try:
                    # Test d'ouverture du stream
                    stream = p.open(
                        format=pyaudio.paInt16,
                        channels=1,
                        rate=sample_rate,
                        input=True,
                        output=True,
                        frames_per_buffer=buffer_size
                    )
                    
                    # Calcul de la latence th√©orique
                    latency_ms = (buffer_size / sample_rate) * 1000
                    
                    stream.close()
                    
                    if latency_ms < 5:
                        status = "üü¢ EXCELLENT"
                    elif latency_ms < 15:
                        status = "üü° BON"
                    else:
                        status = "üî¥ √âLEV√â"
                        
                    self.log_result(f"Latence Buffer {buffer_size}", status, 
                                  f"~{latency_ms:.1f}ms")
                    
                except Exception as e:
                    self.log_result(f"Latence Buffer {buffer_size}", "‚ùå ERREUR", 
                                  f"Impossible de tester: {str(e)}")
            
            p.terminate()
            
        except Exception as e:
            self.log_result("Test Latence", "‚ùå ERREUR", 
                          f"Erreur g√©n√©rale: {str(e)}", 
                          "V√©rifiez l'installation de PyAudio")
    
    def test_network_connectivity(self):
        """Teste la connectivit√© r√©seau"""
        print("üåê Test de connectivit√© r√©seau...")
        
        # Test de port disponible
        port = 12345
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.bind(('localhost', port))
            sock.close()
            self.log_result("Port R√©seau", "‚úÖ OK", f"Port {port} disponible")
        except Exception as e:
            self.log_result("Port R√©seau", "‚ùå ERREUR", 
                          f"Port {port} occup√©: {str(e)}", 
                          "Fermez les applications utilisant ce port ou changez le port")
        
        # Test de latence r√©seau local
        try:
            start_time = time.time()
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(('127.0.0.1', 80))
            end_time = time.time()
            sock.close()
            
            latency = (end_time - start_time) * 1000
            if latency < 1:
                status = "üü¢ EXCELLENT"
            elif latency < 5:
                status = "üü° BON"
            else:
                status = "üî¥ √âLEV√â"
                
            self.log_result("Latence R√©seau Local", status, f"~{latency:.1f}ms")
            
        except Exception as e:
            self.log_result("Latence R√©seau", "‚ö†Ô∏è ATTENTION", 
                          "Impossible de tester la latence r√©seau")
    
    def test_system_performance(self):
        """Teste les performances syst√®me"""
        print("üñ•Ô∏è Test des performances syst√®me...")
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent < 50:
            cpu_status = "üü¢ BON"
        elif cpu_percent < 80:
            cpu_status = "üü° MOD√âR√â"
        else:
            cpu_status = "üî¥ √âLEV√â"
            
        self.log_result("Utilisation CPU", cpu_status, f"{cpu_percent:.1f}%")
        
        # RAM
        memory = psutil.virtual_memory()
        ram_percent = memory.percent
        if ram_percent < 70:
            ram_status = "üü¢ BON"
        elif ram_percent < 90:
            ram_status = "üü° MOD√âR√â"
        else:
            ram_status = "üî¥ √âLEV√â"
            
        self.log_result("Utilisation RAM", ram_status, 
                      f"{ram_percent:.1f}% ({memory.used // (1024**3)}GB/{memory.total // (1024**3)}GB)")
        
        # Syst√®me
        system_info = f"{platform.system()} {platform.release()}"
        self.log_result("Syst√®me", "‚ÑπÔ∏è INFO", system_info)
    
    def test_audio_quality(self):
        """Teste la qualit√© audio avec un signal de test"""
        print("üéº Test de qualit√© audio...")
        
        try:
            p = pyaudio.PyAudio()
            
            # G√©n√©ration d'un signal de test (440Hz - La)
            sample_rate = 44100
            duration = 1.0
            frequency = 440.0
            
            t = np.linspace(0, duration, int(sample_rate * duration), False)
            test_signal = np.sin(2 * np.pi * frequency * t)
            test_signal = (test_signal * 32767).astype(np.int16)
            
            # Test de lecture
            try:
                stream_out = p.open(
                    format=pyaudio.paInt16,
                    channels=1,
                    rate=sample_rate,
                    output=True,
                    frames_per_buffer=1024
                )
                
                # Joue le signal de test (silencieusement pour le diagnostic)
                stream_out.write(test_signal.tobytes())
                stream_out.close()
                
                self.log_result("Test Audio Sortie", "‚úÖ OK", 
                              "Signal de test g√©n√©r√© avec succ√®s")
                
            except Exception as e:
                self.log_result("Test Audio Sortie", "‚ùå ERREUR", 
                              f"Erreur de lecture: {str(e)}", 
                              "V√©rifiez vos haut-parleurs ou casque")
            
            # Test d'enregistrement
            try:
                stream_in = p.open(
                    format=pyaudio.paInt16,
                    channels=1,
                    rate=sample_rate,
                    input=True,
                    frames_per_buffer=1024
                )
                
                # Enregistre un court √©chantillon
                data = stream_in.read(1024)
                stream_in.close()
                
                # Analyse du signal
                audio_data = np.frombuffer(data, dtype=np.int16)
                rms = np.sqrt(np.mean(audio_data**2))
                
                if rms > 1000:
                    self.log_result("Test Audio Entr√©e", "‚úÖ OK", 
                                  f"Signal d√©tect√© (RMS: {rms:.0f})")
                elif rms > 100:
                    self.log_result("Test Audio Entr√©e", "üü° FAIBLE", 
                                  f"Signal faible (RMS: {rms:.0f})", 
                                  "Augmentez le volume du microphone")
                else:
                    self.log_result("Test Audio Entr√©e", "‚ö†Ô∏è AUCUN", 
                                  f"Pas de signal (RMS: {rms:.0f})", 
                                  "V√©rifiez votre microphone et parlez plus fort")
                
            except Exception as e:
                self.log_result("Test Audio Entr√©e", "‚ùå ERREUR", 
                              f"Erreur d'enregistrement: {str(e)}", 
                              "V√©rifiez votre microphone et les permissions")
            
            p.terminate()
            
        except Exception as e:
            self.log_result("Test Qualit√© Audio", "‚ùå ERREUR", 
                          f"Erreur g√©n√©rale: {str(e)}")
    
    def generate_report(self):
        """G√©n√®re un rapport de diagnostic complet"""
        print("\n" + "="*60)
        print("üìã RAPPORT DE DIAGNOSTIC LANVOICE")
        print("="*60)
        
        # R√©sum√© des statuts
        total_tests = len(self.results)
        ok_count = sum(1 for r in self.results if "‚úÖ" in r['status'])
        error_count = sum(1 for r in self.results if "‚ùå" in r['status'])
        warning_count = sum(1 for r in self.results if "‚ö†Ô∏è" in r['status'])
        
        print(f"\nüìä R√âSUM√â: {total_tests} tests effectu√©s")
        print(f"   ‚úÖ R√©ussis: {ok_count}")
        print(f"   ‚ùå Erreurs: {error_count}")
        print(f"   ‚ö†Ô∏è Avertissements: {warning_count}")
        
        # D√©tails des tests
        print(f"\nüìù D√âTAILS DES TESTS:")
        print("-" * 60)
        
        for result in self.results:
            print(f"[{result['timestamp']}] {result['test']}: {result['status']}")
            if result['details']:
                print(f"   üìÑ {result['details']}")
            if result['solution']:
                print(f"   üí° Solution: {result['solution']}")
            print()
        
        # Recommandations
        print("üîß RECOMMANDATIONS:")
        print("-" * 60)
        
        if error_count == 0 and warning_count == 0:
            print("‚úÖ Votre syst√®me est optimis√© pour LanVoice!")
            print("   Tous les tests sont r√©ussis, vous devriez avoir d'excellentes performances.")
        elif error_count > 0:
            print("‚ùå Des probl√®mes critiques ont √©t√© d√©tect√©s:")
            print("   Corrigez les erreurs ci-dessus avant d'utiliser LanVoice.")
        else:
            print("üü° Votre syst√®me fonctionne mais peut √™tre optimis√©:")
            print("   Consultez les solutions propos√©es pour am√©liorer les performances.")
        
        # Profil recommand√©
        if error_count == 0:
            if ok_count >= total_tests * 0.9:
                print("\nüéØ PROFIL RECOMMAND√â: Ultra Low Latency")
                print("   Votre syst√®me peut g√©rer la latence minimale (<3ms)")
            elif warning_count <= 2:
                print("\nüéØ PROFIL RECOMMAND√â: Low Latency")
                print("   Bon compromis performance/stabilit√© (~6ms)")
            else:
                print("\nüéØ PROFIL RECOMMAND√â: Quality")
                print("   Privil√©gie la stabilit√© et la qualit√© (~12ms)")
        else:
            print("\nüéØ PROFIL RECOMMAND√â: Bandwidth Saving")
            print("   Mode conservateur jusqu'√† r√©solution des probl√®mes")
        
        print("\n" + "="*60)
        print(f"Diagnostic termin√© - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)

def main():
    """Fonction principale du diagnostic"""
    print("üîç LanVoice - Diagnostic Audio v2.0")
    print("Analyse de votre syst√®me pour optimiser les performances audio...\n")
    
    diagnostic = LanVoiceDiagnostic()
    
    try:
        # Ex√©cution des tests
        diagnostic.test_system_performance()
        diagnostic.test_audio_devices()
        diagnostic.test_audio_latency()
        diagnostic.test_audio_quality()
        diagnostic.test_network_connectivity()
        
        # G√©n√©ration du rapport
        diagnostic.generate_report()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Diagnostic interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue: {str(e)}")
        print("Veuillez signaler ce probl√®me avec les d√©tails ci-dessus.")

if __name__ == "__main__":
    main()