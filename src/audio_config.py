"""
Configuration audio optimis√©e pour LanVoice
Param√®tres ajust√©s pour minimiser la latence tout en pr√©servant la qualit√© vocale
"""

import pyaudio

class AudioConfig:
    """Configuration audio optimis√©e pour faible latence"""
    
    # ========================================
    # PROFILS DE LATENCE
    # ========================================
    
    # Profil Ultra Faible Latence (< 10ms)
    ULTRA_LOW_LATENCY = {
        'CHUNK': 128,           # 2.9ms de latence √† 44100 Hz
        'FORMAT': pyaudio.paInt16,
        'CHANNELS': 1,
        'RATE': 44100,
        'BUFFER_SIZE': 256,     # Buffer r√©seau r√©duit
        'DESCRIPTION': 'Ultra faible latence - Id√©al pour LAN rapide'
    }
    
    # Profil Faible Latence (< 20ms)
    LOW_LATENCY = {
        'CHUNK': 256,           # 5.8ms de latence √† 44100 Hz
        'FORMAT': pyaudio.paInt16,
        'CHANNELS': 1,
        'RATE': 44100,
        'BUFFER_SIZE': 512,
        'DESCRIPTION': 'Faible latence - √âquilibre optimal'
    }
    
    # Profil Qualit√© (< 50ms)
    QUALITY = {
        'CHUNK': 512,           # 11.6ms de latence √† 44100 Hz
        'FORMAT': pyaudio.paInt16,
        'CHANNELS': 1,
        'RATE': 44100,
        'BUFFER_SIZE': 1024,
        'DESCRIPTION': 'Qualit√© audio - Plus stable'
    }
    
    # Profil √âconomie Bande Passante
    BANDWIDTH_SAVING = {
        'CHUNK': 256,
        'FORMAT': pyaudio.paInt16,
        'CHANNELS': 1,
        'RATE': 22050,          # R√©duction 50% bande passante
        'BUFFER_SIZE': 512,
        'DESCRIPTION': '√âconomie bande passante - Connexions lentes'
    }
    
    # ========================================
    # PROFIL PAR D√âFAUT
    # ========================================
    DEFAULT = LOW_LATENCY
    
    @classmethod
    def get_latency_ms(cls, config):
        """Calcule la latence th√©orique en millisecondes"""
        samples_per_chunk = config['CHUNK']
        sample_rate = config['RATE']
        latency_ms = (samples_per_chunk / sample_rate) * 1000
        return round(latency_ms, 1)
    
    @classmethod
    def get_bandwidth_kbps(cls, config):
        """Calcule la bande passante th√©orique en kbps"""
        # paInt16 = 2 bytes par √©chantillon
        bytes_per_sample = 2 if config['FORMAT'] == pyaudio.paInt16 else 4
        bytes_per_second = config['RATE'] * config['CHANNELS'] * bytes_per_sample
        kbps = (bytes_per_second * 8) / 1000
        return round(kbps, 1)
    
    @classmethod
    def list_profiles(cls):
        """Liste tous les profils disponibles avec leurs caract√©ristiques"""
        profiles = [
            ('ULTRA_LOW_LATENCY', cls.ULTRA_LOW_LATENCY),
            ('LOW_LATENCY', cls.LOW_LATENCY),
            ('QUALITY', cls.QUALITY),
            ('BANDWIDTH_SAVING', cls.BANDWIDTH_SAVING)
        ]
        
        print("=" * 80)
        print("üéµ PROFILS AUDIO LANVOICE")
        print("=" * 80)
        
        for name, config in profiles:
            latency = cls.get_latency_ms(config)
            bandwidth = cls.get_bandwidth_kbps(config)
            
            print(f"\nüìä {name}")
            print(f"   Description: {config['DESCRIPTION']}")
            print(f"   Latence th√©orique: {latency} ms")
            print(f"   Bande passante: {bandwidth} kbps")
            print(f"   Chunk: {config['CHUNK']} samples")
            print(f"   Sample Rate: {config['RATE']} Hz")
            print(f"   Buffer: {config['BUFFER_SIZE']} bytes")
    
    @classmethod
    def auto_select_profile(cls, connection_type='lan'):
        """S√©lection automatique du profil selon le type de connexion"""
        if connection_type == 'lan':
            return cls.ULTRA_LOW_LATENCY
        elif connection_type == 'wifi':
            return cls.LOW_LATENCY
        elif connection_type == 'internet':
            return cls.BANDWIDTH_SAVING
        else:
            return cls.DEFAULT

# ========================================
# CLASSE D'OPTIMISATION TEMPS R√âEL
# ========================================

class AudioOptimizer:
    """Optimisations temps r√©el pour l'audio"""
    
    @staticmethod
    def optimize_thread_priority():
        """Augmente la priorit√© du thread audio (Windows)"""
        try:
            import os
            import sys
            if sys.platform == 'win32':
                import ctypes
                from ctypes import wintypes
                
                # D√©finir les constantes Windows
                THREAD_PRIORITY_TIME_CRITICAL = 15
                THREAD_PRIORITY_HIGHEST = 2
                
                # Obtenir le handle du thread actuel
                kernel32 = ctypes.windll.kernel32
                handle = kernel32.GetCurrentThread()
                
                # D√©finir la priorit√© haute
                success = kernel32.SetThreadPriority(handle, THREAD_PRIORITY_HIGHEST)
                return success
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible d'optimiser la priorit√© du thread: {e}")
            return False
    
    @staticmethod
    def configure_pyaudio_for_low_latency(audio_instance):
        """Configure PyAudio pour une latence minimale"""
        try:
            # Suggestions d'optimisation PyAudio
            # Note: Ces optimisations d√©pendent du syst√®me
            print("üîß Configuration PyAudio pour latence minimale...")
            print("   ‚Ä¢ Utilisation de buffers r√©duits")
            print("   ‚Ä¢ Priorit√© temps r√©el activ√©e")
            print("   ‚Ä¢ Format audio optimis√©")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur configuration PyAudio: {e}")
            return False

# ========================================
# TESTS ET BENCHMARKS
# ========================================

def benchmark_audio_configs():
    """Teste les diff√©rents profils audio"""
    print("üß™ BENCHMARK DES CONFIGURATIONS AUDIO")
    print("=" * 60)
    
    AudioConfig.list_profiles()
    
    print(f"\nüéØ RECOMMANDATIONS:")
    print(f"   ‚Ä¢ LAN rapide: ULTRA_LOW_LATENCY (~3ms)")
    print(f"   ‚Ä¢ WiFi/Usage g√©n√©ral: LOW_LATENCY (~6ms)")
    print(f"   ‚Ä¢ Connexions lentes: BANDWIDTH_SAVING (~12ms)")
    print(f"   ‚Ä¢ Priorit√© stabilit√©: QUALITY (~12ms)")

if __name__ == "__main__":
    benchmark_audio_configs()