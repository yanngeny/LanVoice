"""
Script de test pour les am√©liorations de gestion d'erreurs dans LanVoice
Ce script teste diff√©rents sc√©narios d'erreur pour v√©rifier que les messages sont informatifs
"""

import socket
import threading
import time
import sys
import os

# Ajouter le dossier src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

try:
    from src.server import VoiceServer
    from src.client import VoiceClient
    from src.logger import init_logging, get_logger
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    sys.exit(1)

def test_verbose_errors():
    """Test des am√©liorations de gestion d'erreurs"""
    
    print("=" * 60)
    print("üß™ TEST DES AM√âLIORATIONS D'ERREURS LANVOICE")
    print("=" * 60)
    
    # Initialiser le logging
    logger_system = init_logging()
    logger = get_logger('Test')
    
    print("\n1Ô∏è‚É£ Test: Port d√©j√† utilis√©")
    print("-" * 30)
    
    try:
        # Cr√©er un socket qui va bloquer le port
        blocking_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        blocking_socket.bind(('0.0.0.0', 12345))
        blocking_socket.listen(1)
        print("‚úÖ Socket bloquant cr√©√© sur le port 12345")
        
        # Essayer de cr√©er un serveur sur le m√™me port
        server = VoiceServer(host="0.0.0.0", port=12345)
        try:
            server.start()
            print("‚ùå Le serveur aurait d√ª √©chouer!")
        except OSError as e:
            print(f"‚úÖ Erreur captur√©e correctement: {type(e).__name__}")
            print(f"   Message: {e}")
            print(f"   Errno: {getattr(e, 'errno', 'N/A')}")
        
        blocking_socket.close()
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    print("\n2Ô∏è‚É£ Test: Port invalide")
    print("-" * 30)
    
    try:
        server = VoiceServer(host="0.0.0.0", port=99999)  # Port trop √©lev√©
        server.start()
        print("‚ùå Le serveur aurait d√ª √©chouer!")
    except (OSError, ValueError) as e:
        print(f"‚úÖ Erreur captur√©e correctement: {type(e).__name__}")
        print(f"   Message: {e}")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
    
    print("\n3Ô∏è‚É£ Test: Connexion impossible")
    print("-" * 30)
    
    try:
        client = VoiceClient(host="192.168.999.999", port=12345)  # IP invalide
        success = client.connect()
        if not success:
            print("‚úÖ Connexion √©chou√©e comme attendu")
        else:
            print("‚ùå La connexion aurait d√ª √©chouer!")
    except Exception as e:
        print(f"‚úÖ Erreur captur√©e: {type(e).__name__}: {e}")
    
    print("\n4Ô∏è‚É£ Test: R√©solution DNS √©chou√©e")
    print("-" * 30)
    
    try:
        client = VoiceClient(host="serveur.inexistant.local", port=12345)
        success = client.connect()
        if not success:
            print("‚úÖ Connexion √©chou√©e comme attendu")
    except socket.gaierror as e:
        print(f"‚úÖ Erreur DNS captur√©e: {e}")
    except Exception as e:
        print(f"‚úÖ Erreur captur√©e: {type(e).__name__}: {e}")
    
    print("\n5Ô∏è‚É£ Test: Serveur fonctionnel")
    print("-" * 30)
    
    try:
        server = VoiceServer(host="127.0.0.1", port=12346)  # Port diff√©rent
        server_thread = threading.Thread(target=server.start, daemon=True)
        server_thread.start()
        
        time.sleep(0.5)  # Laisser le temps au serveur de d√©marrer
        
        if server.running:
            print("‚úÖ Serveur d√©marr√© avec succ√®s sur le port 12346")
            
            # Tester la connexion client
            client = VoiceClient(host="127.0.0.1", port=12346)
            if client.connect():
                print("‚úÖ Client connect√© avec succ√®s")
                client.disconnect()
                print("‚úÖ Client d√©connect√©")
            else:
                print("‚ùå √âchec de connexion du client")
            
            server.stop()
            print("‚úÖ Serveur arr√™t√©")
        else:
            print("‚ùå √âchec du d√©marrage du serveur")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test du serveur fonctionnel: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ TESTS TERMIN√âS")
    print("=" * 60)
    print("\nüí° Les erreurs d√©taill√©es sont maintenant logg√©es dans:")
    print(f"   üìÅ logs/")
    print(f"   üìÑ Derniers logs cr√©√©s")

if __name__ == "__main__":
    test_verbose_errors()